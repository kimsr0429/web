<div class="my-5">
    <h2 class="text-center mb-">댓글</h2>
    <div>
        <div class="mb-2">
            댓글수: <span><b id="total"></b></span>
        </div>
        <div id="div_comments"></div>
        <div id="pagination" class="pagination justify-content-center mt-5"></div>
    </div>
    <div id="div_insert" class="mt-3" style="display: none;">
    <textarea id="comment_body" class="form-control" rows="5" placeholder="내용을 입력하세요."></textarea>
        <div class="text-end mt-2">
            <button id="btn-insert" class="btn btn-primary btn-sm px-4">등록</button>
        </div>
    </div>
    <div id="div_login" class="mt-3">
        <button id="btn-login" class="btn btn-primary w-100">로그인</button>
    </div>
</div>

<script id="templ_comments" type="x-handlebars-template">
    {{#each .}}
        <div class="card mb-2">
            <div class="card-body">
                <div class="body ellipsis-2">{{body}}</div>
            </div>
            <div class="view{{id}} card-footer d-flex">
                <small>{{email}}</small>
                <small class="ms-auto">{{date}}</small>
                <div class="text-end ms-3" style="{{fn_button email}}">
                    <button class="btn-update btn btn-success btn-sm" id={{id}}>수정</button>
                    <button class="btn-delete btn btn-danger btn-sm" id={{id}}>삭제</button>
                </div>
            </div>

            <div class="edit{{id}}" style="display: none;">
                <div>
                    <textarea class="body form-control" rows="5">{{body}}</textarea>
                </div>
                <div class="text-end mx-3 my-2">
                    <button class="btn-save btn btn-dark btn-sm" id={{id}}>저장</button>
                    <button class="btn-cancel btn btn-dark btn-sm" id={{id}}>취소</button>
                </div>
            </div>
        </div>
    {{/each}}
</script>

<script>
    Handlebars.registerHelper("fn_button", function(email) {
        if(sessionStorage.getItem("email") != email) {
            return "display: none;"
        }
    });
</script>

<script type="module">
    import { app } from "/javascripts/firebase.js";
    import { getFirestore, collection, query, orderBy, doc, addDoc, setDoc, getDoc, getDocs, deleteDoc, where } from "https://www.gstatic.com/firebasejs/10.4.0/firebase-firestore.js";
    const db = getFirestore(app);

    let total = 0;
    const size = 3;
    let page = 1;

    const id = "<%=id%>"
    if(sessionStorage.getItem("uid")) {
        $("#div_insert, #div_login").toggle();
    }

    // body를 클릭한 경우
    $("#div_comments").on("click", ".body", async function() {
        $(this).toggleClass("ellipsis-2");
    });

    // 저장버튼을 클릭한 경우
    $("#div_comments").on("click", ".btn-save", async function() {
        const id = $(this).attr("id");
        const edit = $(this).parent().parent();
        const body = edit.find(".body").val();

        if(confirm("댓글을 수정하시겠습니까?")) {
            const snapshot = await getDoc(doc(db, `comments/${id}`));
            await setDoc(doc(db, `comments/${id}`), {...snapshot.data(), body});
            alert("댓글 수정이 완료되었습니다.")
            getComments();
        };

    });

    // 삭제버튼을 클릭한 경우
    $("#div_comments").on("click", ".btn-delete", async function() {
        const id = $(this).attr("id");
        if(confirm("댓글을 삭제하시겠습니까?")) {
            await deleteDoc(doc(db, `/comments/${id}`));
            console.log(id)
            alert("댓글 삭제를 완료했습니다.");
            getComments();
        }
    });

    // 수정버튼을 클릭한 경우
    $("#div_comments").on("click", ".btn-update", async function() {
        const id = $(this).attr("id");
        $("#div_comments .view" + id).hide();
        $("#div_comments .edit" + id).show();
    });
    
    // 취소버튼을 클릭한 경우
    $("#div_comments").on("click", ".btn-cancel", async function() {
        const id = $(this).attr("id");
        $("#div_comments .view" + id).show();
        $("#div_comments .edit" + id).hide();
    });

    $("#btn-login").on("click", function() {
        sessionStorage.setItem("target", `/posts/read?id=${id}`)
        location.href = "/users/login";
    });

    $("#btn-insert").on("click", async function() {
        const body = $("#comment_body").val();
        const date = moment(new Date()).format("YYYY-MM-DD HH:mm:ss");
        const email = sessionStorage.getItem("email"); 
        const data = {pid: id, email, body, date};

        if(!body) {
            alert("댓글을 입력해주세요.");
            $("#comment_body").focus();
        } else {
            await addDoc(collection(db, 'comments'), data);
            $("#comment_body").val("");
            getComments();
        }
    });

    getComments();
    async function getComments() {
        const q = query(collection(db, 'comments'), where("pid", "==", id), orderBy("date", "desc"));
        const snapshot = await getDocs(q);
        $("#total").html(`<b>${snapshot.docs.length}</b>`);

        // 전체 페이지 수 구하기
        if(total != snapshot.docs.length){
            total = snapshot.docs.length;
            const totalPages = Math.ceil(total / size);
            $("#pagination").twbsPagination("changeTotalPages", totalPages, 1);
        }

        let rows = [];
        snapshot.docs.forEach((doc, index) => {
            const start = (page - 1) * size; // 0
            const end = (page * size) - 1; // 2
            if(index >= start && index <= end) {
                const data = {id: doc.id, ...doc.data()};
                rows.push(data);
            }
        });

        const templ = Handlebars.compile($("#templ_comments").html());
        $("#div_comments").html(templ(rows));
    }

    $('#pagination').twbsPagination({
        totalPages: 10, //총 페이지 번호 수
        visiblePages: 5, // 하단에서 한 번에 보여 지는 페이지 번호 수
        startPage : 1, // 시작 시 표시되는 현재 페이지
        initiateStartPageClick: false, // 플러그인이 시작 시 페이지 버튼 클릭 여부 (default : true) 
        first : '<<', // 페이지네이션 버튼 중 처음으로 돌아가는 버튼에 쓰여 있는 텍스트
        prev : '<', // 이전 페이지 버튼에 쓰여 있는 텍스트
        next : '>', // 다음 페이지 버튼에 쓰여 있는 텍스트
        last : '>>', // 페이지네이션 버튼 중 마지막으로 가는 버튼에 쓰여 있는 텍스트

        onPageClick: function (event, clickPage) {
            page=clickPage;
            getComments(); 
        }
    });
</script>